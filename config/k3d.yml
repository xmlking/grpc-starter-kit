# k3d configuration file, saved as e.g. /home/me/k3d.yaml
apiVersion: k3d.io/v1alpha3 # this will change in the future as we make everything more stable
kind: Simple # internally, we also have a Cluster config, which is not yet available externally
name: k3s-default # name that you want to give to your cluster (will still be prefixed with `k3d-`)
servers: 1 # same as `--servers 1`
agents: 3 # same as `--agents 3`

#kubeAPI: # same as `--api-port myhost.my.domain:6443` (where the name would resolve to 127.0.0.1)
#  host: "myhost.my.domain" # important for the `server` setting in the kubeconfig
#  hostIP: "0.0.0.0" # where the Kubernetes API will be listening on
#  hostPort: "6443" # where the Kubernetes API listening port will be mapped to on your host system

image: rancher/k3s:latest # same as `--image rancher/k3s:v1.20.10-k3s1`

#network: my-custom-net # same as `--network my-custom-net`
#subnet: ""
#clusterToken: ""
#token: superSecretToken # same as `--token superSecretToken`

#volumes: # repeatable flags are represented as YAML lists
#  - volume: /my/host/path:/path/in/node # same as `--volume '/my/host/path:/path/in/node@server[0];agent[*]'`
#    nodeFilters:
#      - server[0]
#      - agent[*]

#ports:
#  - port: 80:80 # same as `--port '80:80@loadbalancer'`
#    nodeFilters:
#      - loadbalancer
#  - port: 0.0.0.0:443:443
#    nodeFilters:
#      - loadbalancer

#labels:
#  - label: foo=bar # same as `--label 'foo=bar@agent[1]'`
#    nodeFilters:
#      - agent[1]
#      - server[0]
#      - loadbalancer

#env:
#  - envVar: bar=baz # same as `--env 'bar=baz@server[0]'`
#    nodeFilters:
#      - server[0]

#registries: # define how registries should be created or used
#  create: true # creates a default registry to be used with the cluster; same as `--registry-create`
#  use:
#    - k3d-registry.localhost:5000 # some other k3d-managed registry; same as `--registry-use 'k3d-registry.localhost:5000'`
#  config: | # define contents of the `registries.yaml` file (or reference a file); same as `--registry-config /path/to/config.yaml`
#    mirrors:
#      "localhost:5000":
#        endpoint:
#          - http://k3d-registry.localhost:5000

options:
  k3d: # k3d runtime settings
    wait: true # wait for cluster to be usable before returining; same as `--wait` (default: true)
    timeout: 6m0s # wait timeout before aborting; same as `--timeout 360s`  # should be pretty high for multi-server clusters to allow for a proper startup routine
#    disableLoadbalancer: false # same as `--no-lb`
#    disableImageVolume: false # same as `--no-image-volume`
#    disableRollback: false # same as `--no-Rollback`
#    disableHostIPInjection: false # same as `--no-hostip`

#  k3s: # options passed on to K3s itself
#    extraServerArgs: # additional arguments passed to the `k3s server` command; same as `--k3s-server-arg`
#      - --tls-san=my.host.domain
#    extraAgentArgs: [] # addditional arguments passed to the `k3s agent` command; same as `--k3s-agent-arg`
#    extraArgs: []
#    nodeLabels: []

#  kubeconfig:
#    updateDefaultKubeconfig: true # add new cluster to your default Kubeconfig; same as `--kubeconfig-update-default` (default: true)
#    switchCurrentContext: true # also set current-context to the new cluster's context; same as `--kubeconfig-switch-context` (default: true)
#  runtime: # runtime (docker) specific options
#    gpuRequest: all # same as `--gpus all`
#    serversMemory: ""
#    agentsMemory: ""
#    labels: []

env: []
