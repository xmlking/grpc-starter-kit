name: KinD Deployment
on:
  deployment:
    environment: [e2e]
jobs:
  deploy-n-e2e:
    name: "Deploy to KinD and E2E"
    runs-on: ubuntu-latest
    if: github.event.deployment.environment == 'e2e'
    steps:
      - name: Download kubernetes.local.yaml from Release
        env:
          RELEASE_URL: ${{ github.event.repository.releases_url }}
        run: |
          echo "Downloading $RELEASE_URL"
          # curl -O -L $RELEASE_URL
          # FIXME Workaround
          curl -s https://api.github.com/repos/xmlking/grpc-starter-kit/releases/latest | grep browser_download_url | grep kubernetes.local.yaml | cut -d '"' -f 4 | wget -qi -
      - name: "deployment pending"
        uses: "deliverybot/deployment-status@master"
        with:
          state: "pending"
          token: "${{ github.token }}"

      - name: "Deploy ${{ github.event.deployment.environment }}"
        run: |
          echo "task - ${{ github.event.deployment.task }}"
          echo "environment - ${{ github.event.deployment.environment }}"
          echo "payload - ${{ toJson(github.event.deployment.payload) }}"
      - name: "Create cluster using KinD"
        id: kind
        uses: engineerd/setup-kind@v0.5.0
        # with:
        #   config: .github/kubernetes/kind.yaml
      - name: "Deploy kubernetes.local.yaml to KinD"
        id: local-path
        run: |
          export KUBECONFIG="$(kind get kubeconfig-path)"
          echo "waiting for nodes to be ready ..."
          kubectl wait --for=condition=Ready nodes --all --timeout=5m
          echo "nodes ..."
          kubectl get nodes
          echo "cluster-info ..."
          kubectl cluster-info
          echo "installing e2e overlay..."
          kubectl apply -f kubernetes.local.yaml
          echo "waiting for pods to be ready ..."
          kubectl wait --for=condition=Ready pods --all --timeout=5m
          kubectl get pods
      - name: Run e2e tests
        env:
          # MICRO_REGISTRY: memory
          # MICRO_SELECTOR: static
          MICRO_PROXY_ADDRESS: "localhost:8081"
        run: |
          # make test-e2e
          # e2e/test.sh
          echo "TODO: e2e tests"

      - name: "E2E Test success"
        if: success()
        uses: "deliverybot/deployment-status@master"
        with:
          state: "success"
          token: "${{ github.token }}"

      - name: "E2E Test failure"
        if: failure()
        uses: "deliverybot/deployment-status@master"
        with:
          state: "failure"
          token: "${{ github.token }}"
