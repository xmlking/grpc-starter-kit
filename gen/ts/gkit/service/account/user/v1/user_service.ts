// @generated by protobuf-ts 2.4.0 with parameter long_type_string,generate_dependencies,// @generated from protobuf file "gkit/service/account/user/v1/user_service.proto" (package "gkit.service.account.user.v1", syntax proto3),// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { User } from "../../entities/v1/entities";
import { UInt32Value } from "../../../../../google/protobuf/wrappers";
import { StringValue } from "../../../../../google/protobuf/wrappers";
/**
 * FIXME: https://github.com/envoyproxy/protoc-gen-validate/issues/223
 * with Workaround in .override.go
 *
 * @generated from protobuf message gkit.service.account.user.v1.ExistRequest
 */
export interface ExistRequest {
    /**
     * @generated from protobuf field: google.protobuf.StringValue id = 1;
     */
    id?: StringValue; // Not Working
    /**
     * @generated from protobuf field: google.protobuf.StringValue username = 2;
     */
    username?: StringValue;
    /**
     * @generated from protobuf field: google.protobuf.StringValue first_name = 3;
     */
    firstName?: StringValue;
    /**
     * @generated from protobuf field: google.protobuf.StringValue last_name = 4;
     */
    lastName?: StringValue;
    /**
     * @generated from protobuf field: google.protobuf.StringValue email = 5;
     */
    email?: StringValue; // Not Working
}
/**
 * @generated from protobuf message gkit.service.account.user.v1.ExistResponse
 */
export interface ExistResponse {
    /**
     * @generated from protobuf field: bool result = 1;
     */
    result: boolean;
}
/**
 * @generated from protobuf message gkit.service.account.user.v1.ListRequest
 */
export interface ListRequest {
    /**
     * @generated from protobuf field: google.protobuf.UInt32Value limit = 1;
     */
    limit?: UInt32Value;
    /**
     * @generated from protobuf field: google.protobuf.UInt32Value page = 2;
     */
    page?: UInt32Value;
    /**
     * @generated from protobuf field: google.protobuf.StringValue sort = 3;
     */
    sort?: StringValue;
    /**
     * @generated from protobuf field: google.protobuf.StringValue username = 4;
     */
    username?: StringValue;
    /**
     * @generated from protobuf field: google.protobuf.StringValue first_name = 5;
     */
    firstName?: StringValue;
    /**
     * @generated from protobuf field: google.protobuf.StringValue last_name = 6;
     */
    lastName?: StringValue;
    /**
     * @generated from protobuf field: google.protobuf.StringValue email = 7;
     */
    email?: StringValue; // Not Working
}
/**
 * @generated from protobuf message gkit.service.account.user.v1.ListResponse
 */
export interface ListResponse {
    /**
     * @generated from protobuf field: repeated gkit.service.account.entities.v1.User results = 1;
     */
    results: User[];
    /**
     * @generated from protobuf field: uint32 total = 2;
     */
    total: number;
}
/**
 * @generated from protobuf message gkit.service.account.user.v1.GetRequest
 */
export interface GetRequest {
    /**
     * @generated from protobuf field: google.protobuf.StringValue id = 1;
     */
    id?: StringValue; // Not Working
    /**
     * @generated from protobuf field: google.protobuf.StringValue username = 2;
     */
    username?: StringValue;
    /**
     * @generated from protobuf field: google.protobuf.StringValue first_name = 3;
     */
    firstName?: StringValue;
    /**
     * @generated from protobuf field: google.protobuf.StringValue last_name = 4;
     */
    lastName?: StringValue;
    /**
     * @generated from protobuf field: google.protobuf.StringValue email = 5;
     */
    email?: StringValue; // Not Working
}
/**
 * @generated from protobuf message gkit.service.account.user.v1.GetResponse
 */
export interface GetResponse {
    /**
     * @generated from protobuf field: gkit.service.account.entities.v1.User result = 1;
     */
    result?: User; // basic.Error error =2;
}
/**
 * @generated from protobuf message gkit.service.account.user.v1.CreateRequest
 */
export interface CreateRequest {
    /**
     * @generated from protobuf field: google.protobuf.StringValue username = 2;
     */
    username?: StringValue;
    /**
     * @generated from protobuf field: google.protobuf.StringValue first_name = 3;
     */
    firstName?: StringValue;
    /**
     * @generated from protobuf field: google.protobuf.StringValue last_name = 4;
     */
    lastName?: StringValue;
    /**
     * @generated from protobuf field: google.protobuf.StringValue email = 5;
     */
    email?: StringValue; // Not Working
}
/**
 * @generated from protobuf message gkit.service.account.user.v1.CreateResponse
 */
export interface CreateResponse {
    /**
     * @generated from protobuf field: gkit.service.account.entities.v1.User result = 1;
     */
    result?: User;
}
/**
 * @generated from protobuf message gkit.service.account.user.v1.UpdateRequest
 */
export interface UpdateRequest {
    /**
     * @generated from protobuf field: google.protobuf.StringValue id = 1;
     */
    id?: StringValue; // Not Working
    /**
     * @generated from protobuf field: google.protobuf.StringValue username = 2;
     */
    username?: StringValue;
    /**
     * @generated from protobuf field: google.protobuf.StringValue first_name = 3;
     */
    firstName?: StringValue;
    /**
     * @generated from protobuf field: google.protobuf.StringValue last_name = 4;
     */
    lastName?: StringValue;
    /**
     * @generated from protobuf field: google.protobuf.StringValue email = 5;
     */
    email?: StringValue; // Not Working
}
/**
 * @generated from protobuf message gkit.service.account.user.v1.UpdateResponse
 */
export interface UpdateResponse {
    /**
     * @generated from protobuf field: gkit.service.account.entities.v1.User result = 1;
     */
    result?: User;
}
/**
 * @generated from protobuf message gkit.service.account.user.v1.DeleteRequest
 */
export interface DeleteRequest {
    /**
     * @generated from protobuf field: google.protobuf.StringValue id = 1;
     */
    id?: StringValue; // Not Working
    /**
     * @generated from protobuf field: google.protobuf.StringValue username = 2;
     */
    username?: StringValue;
    /**
     * @generated from protobuf field: google.protobuf.StringValue first_name = 3;
     */
    firstName?: StringValue;
    /**
     * @generated from protobuf field: google.protobuf.StringValue last_name = 4;
     */
    lastName?: StringValue;
    /**
     * @generated from protobuf field: google.protobuf.StringValue email = 5;
     */
    email?: StringValue; // Not Working
}
/**
 * @generated from protobuf message gkit.service.account.user.v1.DeleteResponse
 */
export interface DeleteResponse {
    /**
     * @generated from protobuf field: gkit.service.account.entities.v1.User result = 1;
     */
    result?: User;
}
// @generated message type with reflection information, may provide speed optimized methods
class ExistRequest$Type extends MessageType<ExistRequest> {
    constructor() {
        super("gkit.service.account.user.v1.ExistRequest", [
            { no: 1, name: "id", kind: "message", T: () => StringValue, options: { "validate.rules": { string: { uuid: true } } } },
            { no: 2, name: "username", kind: "message", T: () => StringValue, options: { "validate.rules": { string: { minLen: "4", maxLen: "16", maxBytes: "256", pattern: "^[a-z0-9_-]{3,15}$" } } } },
            { no: 3, name: "first_name", kind: "message", T: () => StringValue, options: { "validate.rules": { string: { minLen: "3" } } } },
            { no: 4, name: "last_name", kind: "message", T: () => StringValue, options: { "validate.rules": { string: { minLen: "3" } } } },
            { no: 5, name: "email", kind: "message", T: () => StringValue, options: { "validate.rules": { string: { email: true } } } }
        ]);
    }
    create(value?: PartialMessage<ExistRequest>): ExistRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ExistRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExistRequest): ExistRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.StringValue id */ 1:
                    message.id = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.id);
                    break;
                case /* google.protobuf.StringValue username */ 2:
                    message.username = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.username);
                    break;
                case /* google.protobuf.StringValue first_name */ 3:
                    message.firstName = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.firstName);
                    break;
                case /* google.protobuf.StringValue last_name */ 4:
                    message.lastName = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.lastName);
                    break;
                case /* google.protobuf.StringValue email */ 5:
                    message.email = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.email);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExistRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.StringValue id = 1; */
        if (message.id)
            StringValue.internalBinaryWrite(message.id, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.StringValue username = 2; */
        if (message.username)
            StringValue.internalBinaryWrite(message.username, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.StringValue first_name = 3; */
        if (message.firstName)
            StringValue.internalBinaryWrite(message.firstName, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.StringValue last_name = 4; */
        if (message.lastName)
            StringValue.internalBinaryWrite(message.lastName, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.StringValue email = 5; */
        if (message.email)
            StringValue.internalBinaryWrite(message.email, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message gkit.service.account.user.v1.ExistRequest
 */
export const ExistRequest = new ExistRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExistResponse$Type extends MessageType<ExistResponse> {
    constructor() {
        super("gkit.service.account.user.v1.ExistResponse", [
            { no: 1, name: "result", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ], { "validate.disabled": true });
    }
    create(value?: PartialMessage<ExistResponse>): ExistResponse {
        const message = { result: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ExistResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExistResponse): ExistResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool result */ 1:
                    message.result = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExistResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool result = 1; */
        if (message.result !== false)
            writer.tag(1, WireType.Varint).bool(message.result);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message gkit.service.account.user.v1.ExistResponse
 */
export const ExistResponse = new ExistResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListRequest$Type extends MessageType<ListRequest> {
    constructor() {
        super("gkit.service.account.user.v1.ListRequest", [
            { no: 1, name: "limit", kind: "message", T: () => UInt32Value, options: { "validate.rules": { uint32: { lte: 100, gte: 1 } } } },
            { no: 2, name: "page", kind: "message", T: () => UInt32Value, options: { "validate.rules": { uint32: { gte: 1 } } } },
            { no: 3, name: "sort", kind: "message", T: () => StringValue },
            { no: 4, name: "username", kind: "message", T: () => StringValue, options: { "validate.rules": { string: { minLen: "4", maxLen: "16", maxBytes: "256", pattern: "^[a-z0-9_-]{3,15}$" } } } },
            { no: 5, name: "first_name", kind: "message", T: () => StringValue, options: { "validate.rules": { string: { minLen: "3" } } } },
            { no: 6, name: "last_name", kind: "message", T: () => StringValue, options: { "validate.rules": { string: { minLen: "3" } } } },
            { no: 7, name: "email", kind: "message", T: () => StringValue, options: { "validate.rules": { string: { email: true } } } }
        ]);
    }
    create(value?: PartialMessage<ListRequest>): ListRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListRequest): ListRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.UInt32Value limit */ 1:
                    message.limit = UInt32Value.internalBinaryRead(reader, reader.uint32(), options, message.limit);
                    break;
                case /* google.protobuf.UInt32Value page */ 2:
                    message.page = UInt32Value.internalBinaryRead(reader, reader.uint32(), options, message.page);
                    break;
                case /* google.protobuf.StringValue sort */ 3:
                    message.sort = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.sort);
                    break;
                case /* google.protobuf.StringValue username */ 4:
                    message.username = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.username);
                    break;
                case /* google.protobuf.StringValue first_name */ 5:
                    message.firstName = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.firstName);
                    break;
                case /* google.protobuf.StringValue last_name */ 6:
                    message.lastName = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.lastName);
                    break;
                case /* google.protobuf.StringValue email */ 7:
                    message.email = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.email);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.UInt32Value limit = 1; */
        if (message.limit)
            UInt32Value.internalBinaryWrite(message.limit, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.UInt32Value page = 2; */
        if (message.page)
            UInt32Value.internalBinaryWrite(message.page, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.StringValue sort = 3; */
        if (message.sort)
            StringValue.internalBinaryWrite(message.sort, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.StringValue username = 4; */
        if (message.username)
            StringValue.internalBinaryWrite(message.username, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.StringValue first_name = 5; */
        if (message.firstName)
            StringValue.internalBinaryWrite(message.firstName, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.StringValue last_name = 6; */
        if (message.lastName)
            StringValue.internalBinaryWrite(message.lastName, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.StringValue email = 7; */
        if (message.email)
            StringValue.internalBinaryWrite(message.email, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message gkit.service.account.user.v1.ListRequest
 */
export const ListRequest = new ListRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListResponse$Type extends MessageType<ListResponse> {
    constructor() {
        super("gkit.service.account.user.v1.ListResponse", [
            { no: 1, name: "results", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => User },
            { no: 2, name: "total", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ], { "validate.disabled": true });
    }
    create(value?: PartialMessage<ListResponse>): ListResponse {
        const message = { results: [], total: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListResponse): ListResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated gkit.service.account.entities.v1.User results */ 1:
                    message.results.push(User.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* uint32 total */ 2:
                    message.total = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated gkit.service.account.entities.v1.User results = 1; */
        for (let i = 0; i < message.results.length; i++)
            User.internalBinaryWrite(message.results[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint32 total = 2; */
        if (message.total !== 0)
            writer.tag(2, WireType.Varint).uint32(message.total);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message gkit.service.account.user.v1.ListResponse
 */
export const ListResponse = new ListResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetRequest$Type extends MessageType<GetRequest> {
    constructor() {
        super("gkit.service.account.user.v1.GetRequest", [
            { no: 1, name: "id", kind: "message", T: () => StringValue, options: { "validate.rules": { string: { uuid: true } } } },
            { no: 2, name: "username", kind: "message", T: () => StringValue, options: { "validate.rules": { string: { minLen: "4", maxLen: "16", maxBytes: "256", pattern: "^[a-z0-9_-]{3,15}$" } } } },
            { no: 3, name: "first_name", kind: "message", T: () => StringValue, options: { "validate.rules": { string: { minLen: "3" } } } },
            { no: 4, name: "last_name", kind: "message", T: () => StringValue, options: { "validate.rules": { string: { minLen: "3" } } } },
            { no: 5, name: "email", kind: "message", T: () => StringValue, options: { "validate.rules": { string: { email: true } } } }
        ]);
    }
    create(value?: PartialMessage<GetRequest>): GetRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetRequest): GetRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.StringValue id */ 1:
                    message.id = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.id);
                    break;
                case /* google.protobuf.StringValue username */ 2:
                    message.username = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.username);
                    break;
                case /* google.protobuf.StringValue first_name */ 3:
                    message.firstName = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.firstName);
                    break;
                case /* google.protobuf.StringValue last_name */ 4:
                    message.lastName = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.lastName);
                    break;
                case /* google.protobuf.StringValue email */ 5:
                    message.email = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.email);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.StringValue id = 1; */
        if (message.id)
            StringValue.internalBinaryWrite(message.id, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.StringValue username = 2; */
        if (message.username)
            StringValue.internalBinaryWrite(message.username, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.StringValue first_name = 3; */
        if (message.firstName)
            StringValue.internalBinaryWrite(message.firstName, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.StringValue last_name = 4; */
        if (message.lastName)
            StringValue.internalBinaryWrite(message.lastName, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.StringValue email = 5; */
        if (message.email)
            StringValue.internalBinaryWrite(message.email, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message gkit.service.account.user.v1.GetRequest
 */
export const GetRequest = new GetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetResponse$Type extends MessageType<GetResponse> {
    constructor() {
        super("gkit.service.account.user.v1.GetResponse", [
            { no: 1, name: "result", kind: "message", T: () => User }
        ], { "validate.disabled": true });
    }
    create(value?: PartialMessage<GetResponse>): GetResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetResponse): GetResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* gkit.service.account.entities.v1.User result */ 1:
                    message.result = User.internalBinaryRead(reader, reader.uint32(), options, message.result);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* gkit.service.account.entities.v1.User result = 1; */
        if (message.result)
            User.internalBinaryWrite(message.result, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message gkit.service.account.user.v1.GetResponse
 */
export const GetResponse = new GetResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateRequest$Type extends MessageType<CreateRequest> {
    constructor() {
        super("gkit.service.account.user.v1.CreateRequest", [
            { no: 2, name: "username", kind: "message", T: () => StringValue, options: { "validate.rules": { string: { minLen: "4", maxLen: "16", maxBytes: "256", pattern: "^[a-z0-9_-]{3,15}$" } } } },
            { no: 3, name: "first_name", kind: "message", T: () => StringValue, options: { "validate.rules": { string: { minLen: "3" } } } },
            { no: 4, name: "last_name", kind: "message", T: () => StringValue, options: { "validate.rules": { string: { minLen: "3" } } } },
            { no: 5, name: "email", kind: "message", T: () => StringValue, options: { "validate.rules": { string: { email: true } } } }
        ]);
    }
    create(value?: PartialMessage<CreateRequest>): CreateRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateRequest): CreateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.StringValue username */ 2:
                    message.username = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.username);
                    break;
                case /* google.protobuf.StringValue first_name */ 3:
                    message.firstName = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.firstName);
                    break;
                case /* google.protobuf.StringValue last_name */ 4:
                    message.lastName = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.lastName);
                    break;
                case /* google.protobuf.StringValue email */ 5:
                    message.email = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.email);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.StringValue username = 2; */
        if (message.username)
            StringValue.internalBinaryWrite(message.username, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.StringValue first_name = 3; */
        if (message.firstName)
            StringValue.internalBinaryWrite(message.firstName, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.StringValue last_name = 4; */
        if (message.lastName)
            StringValue.internalBinaryWrite(message.lastName, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.StringValue email = 5; */
        if (message.email)
            StringValue.internalBinaryWrite(message.email, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message gkit.service.account.user.v1.CreateRequest
 */
export const CreateRequest = new CreateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateResponse$Type extends MessageType<CreateResponse> {
    constructor() {
        super("gkit.service.account.user.v1.CreateResponse", [
            { no: 1, name: "result", kind: "message", T: () => User }
        ], { "validate.disabled": true });
    }
    create(value?: PartialMessage<CreateResponse>): CreateResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateResponse): CreateResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* gkit.service.account.entities.v1.User result */ 1:
                    message.result = User.internalBinaryRead(reader, reader.uint32(), options, message.result);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* gkit.service.account.entities.v1.User result = 1; */
        if (message.result)
            User.internalBinaryWrite(message.result, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message gkit.service.account.user.v1.CreateResponse
 */
export const CreateResponse = new CreateResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateRequest$Type extends MessageType<UpdateRequest> {
    constructor() {
        super("gkit.service.account.user.v1.UpdateRequest", [
            { no: 1, name: "id", kind: "message", T: () => StringValue, options: { "validate.rules": { string: { uuid: true } } } },
            { no: 2, name: "username", kind: "message", T: () => StringValue, options: { "validate.rules": { string: { minLen: "4", maxLen: "16", maxBytes: "256", pattern: "^[a-z0-9_-]{3,15}$" } } } },
            { no: 3, name: "first_name", kind: "message", T: () => StringValue, options: { "validate.rules": { string: { minLen: "3" } } } },
            { no: 4, name: "last_name", kind: "message", T: () => StringValue, options: { "validate.rules": { string: { minLen: "3" } } } },
            { no: 5, name: "email", kind: "message", T: () => StringValue, options: { "validate.rules": { string: { email: true } } } }
        ]);
    }
    create(value?: PartialMessage<UpdateRequest>): UpdateRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateRequest): UpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.StringValue id */ 1:
                    message.id = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.id);
                    break;
                case /* google.protobuf.StringValue username */ 2:
                    message.username = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.username);
                    break;
                case /* google.protobuf.StringValue first_name */ 3:
                    message.firstName = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.firstName);
                    break;
                case /* google.protobuf.StringValue last_name */ 4:
                    message.lastName = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.lastName);
                    break;
                case /* google.protobuf.StringValue email */ 5:
                    message.email = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.email);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.StringValue id = 1; */
        if (message.id)
            StringValue.internalBinaryWrite(message.id, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.StringValue username = 2; */
        if (message.username)
            StringValue.internalBinaryWrite(message.username, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.StringValue first_name = 3; */
        if (message.firstName)
            StringValue.internalBinaryWrite(message.firstName, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.StringValue last_name = 4; */
        if (message.lastName)
            StringValue.internalBinaryWrite(message.lastName, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.StringValue email = 5; */
        if (message.email)
            StringValue.internalBinaryWrite(message.email, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message gkit.service.account.user.v1.UpdateRequest
 */
export const UpdateRequest = new UpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateResponse$Type extends MessageType<UpdateResponse> {
    constructor() {
        super("gkit.service.account.user.v1.UpdateResponse", [
            { no: 1, name: "result", kind: "message", T: () => User }
        ], { "validate.disabled": true });
    }
    create(value?: PartialMessage<UpdateResponse>): UpdateResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateResponse): UpdateResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* gkit.service.account.entities.v1.User result */ 1:
                    message.result = User.internalBinaryRead(reader, reader.uint32(), options, message.result);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* gkit.service.account.entities.v1.User result = 1; */
        if (message.result)
            User.internalBinaryWrite(message.result, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message gkit.service.account.user.v1.UpdateResponse
 */
export const UpdateResponse = new UpdateResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteRequest$Type extends MessageType<DeleteRequest> {
    constructor() {
        super("gkit.service.account.user.v1.DeleteRequest", [
            { no: 1, name: "id", kind: "message", T: () => StringValue, options: { "validate.rules": { string: { uuid: true } } } },
            { no: 2, name: "username", kind: "message", T: () => StringValue, options: { "validate.rules": { string: { minLen: "4", maxLen: "16", maxBytes: "256", pattern: "^[a-z0-9_-]{3,15}$" } } } },
            { no: 3, name: "first_name", kind: "message", T: () => StringValue, options: { "validate.rules": { string: { minLen: "3" } } } },
            { no: 4, name: "last_name", kind: "message", T: () => StringValue, options: { "validate.rules": { string: { minLen: "3" } } } },
            { no: 5, name: "email", kind: "message", T: () => StringValue, options: { "validate.rules": { string: { email: true } } } }
        ]);
    }
    create(value?: PartialMessage<DeleteRequest>): DeleteRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteRequest): DeleteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.StringValue id */ 1:
                    message.id = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.id);
                    break;
                case /* google.protobuf.StringValue username */ 2:
                    message.username = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.username);
                    break;
                case /* google.protobuf.StringValue first_name */ 3:
                    message.firstName = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.firstName);
                    break;
                case /* google.protobuf.StringValue last_name */ 4:
                    message.lastName = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.lastName);
                    break;
                case /* google.protobuf.StringValue email */ 5:
                    message.email = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.email);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.StringValue id = 1; */
        if (message.id)
            StringValue.internalBinaryWrite(message.id, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.StringValue username = 2; */
        if (message.username)
            StringValue.internalBinaryWrite(message.username, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.StringValue first_name = 3; */
        if (message.firstName)
            StringValue.internalBinaryWrite(message.firstName, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.StringValue last_name = 4; */
        if (message.lastName)
            StringValue.internalBinaryWrite(message.lastName, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.StringValue email = 5; */
        if (message.email)
            StringValue.internalBinaryWrite(message.email, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message gkit.service.account.user.v1.DeleteRequest
 */
export const DeleteRequest = new DeleteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteResponse$Type extends MessageType<DeleteResponse> {
    constructor() {
        super("gkit.service.account.user.v1.DeleteResponse", [
            { no: 1, name: "result", kind: "message", T: () => User }
        ], { "validate.disabled": true });
    }
    create(value?: PartialMessage<DeleteResponse>): DeleteResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteResponse): DeleteResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* gkit.service.account.entities.v1.User result */ 1:
                    message.result = User.internalBinaryRead(reader, reader.uint32(), options, message.result);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* gkit.service.account.entities.v1.User result = 1; */
        if (message.result)
            User.internalBinaryWrite(message.result, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message gkit.service.account.user.v1.DeleteResponse
 */
export const DeleteResponse = new DeleteResponse$Type();
/**
 * @generated ServiceType for protobuf service gkit.service.account.user.v1.UserService
 */
export const UserService = new ServiceType("gkit.service.account.user.v1.UserService", [
    { name: "Exist", options: {}, I: ExistRequest, O: ExistResponse },
    { name: "List", options: {}, I: ListRequest, O: ListResponse },
    { name: "Get", options: {}, I: GetRequest, O: GetResponse },
    { name: "Create", options: {}, I: CreateRequest, O: CreateResponse },
    { name: "Update", options: {}, I: UpdateRequest, O: UpdateResponse },
    { name: "Delete", options: {}, I: DeleteRequest, O: DeleteResponse }
]);
